{"code":"import { TrackerConfig } from \"../types/index\";\nimport { createHistoryEvent } from \"../utils/pv\";\n// 需要监听的事件\nconst MouseEventList = ['click', 'dblclick', 'contextmenu', 'mousedown', 'mouseup', 'mouseenter', 'mouseout', 'mouseover'];\nexport default class Tracker {\n    constructor(options) {\n        this.data = Object.assign(this.initDef(), options); //把options复制到this.initDef中去，有相同的就会覆盖\n        this.installTracker();\n    }\n    //进行一个默认设置\n    initDef() {\n        // 重写赋值\n        window.history['pushState'] = createHistoryEvent('pushState');\n        window.history['replaceState'] = createHistoryEvent('replaceState');\n        return {\n            sdkVersion: TrackerConfig.version,\n            historyTracker: false,\n            hashTracker: false,\n            domTracker: false,\n            jsError: false\n        };\n    }\n    /**\n     * 事件捕获器\n     * @param mouseEventList 事件列表\n     * @param targetKey 这个值是后台定的\n     * @param data\n     */\n    captureEvents(mouseEventList, targetKey, data) {\n        mouseEventList.forEach((event, index) => {\n            window.addEventListener(event, () => {\n                console.log(\"监听到了\");\n                //一旦我们监听到我们就系统自动进行上报\n                this.reportTracker({\n                    event,\n                    targetKey,\n                    data\n                });\n            });\n        });\n    }\n    //用来判断是否开启\n    installTracker() {\n        if (this.data.historyTracker) {\n            this.captureEvents(['pushState', 'replaceState', 'popstate'], \"history-pv\");\n        }\n        if (this.data.hashTracker) {\n            this.captureEvents(['hashchange'], 'hash-pv');\n        }\n        if (this.data.domTracker) {\n            this.targetKeyReport();\n        }\n        if (this.data.jsError) {\n            this.jsError();\n        }\n    }\n    /**\n     * 上报监控数据给后台\n     * @param data 传入的数据\n     */\n    reportTracker(data) {\n        //因为第二个参数BodyInit没有json格式\n        const params = Object.assign(this.data, data, { time: new Date().getTime() });\n        let headers = {\n            type: 'application/x-www-form-urlencoded'\n        };\n        let blob = new Blob([JSON.stringify(params)], headers); //转化成二进制然后进行new一个blob对象\n        navigator.sendBeacon(this.data.requestUrl, blob);\n    }\n    //DOM事件上报：分出来写\n    targetKeyReport() {\n        MouseEventList.forEach((event) => {\n            window.addEventListener(event, (e) => {\n                const target = e.target;\n                const targetKey = target.getAttribute('target-key');\n                // 看dom上有没有这个属性，如果有就进行上报\n                if (targetKey) {\n                    this.reportTracker({\n                        event,\n                        targetKey\n                    });\n                }\n            });\n        });\n    }\n    //收集一下\n    jsError() {\n        this.errorEvent();\n        this.promiseError();\n    }\n    /**\n     * 监听普通错误error\n     */\n    errorEvent() {\n        window.addEventListener(\"error\", (event) => {\n            this.reportTracker({\n                event: \"error\",\n                targetKey: \"message\",\n                message: event.message\n            });\n        });\n    }\n    /**\n     * 监听promise的错误\n     */\n    promiseError() {\n        window.addEventListener(\"unhandledrejection\", (event) => {\n            event.promise.catch(error => {\n                this.reportTracker({\n                    event: \"promiseError\",\n                    targetKey: \"message\",\n                    message: error\n                });\n            });\n        });\n    }\n    /**\n     * 手动上报\n     */\n    setTracker(data) {\n        this.reportTracker(data);\n    }\n    /**\n     * 用来设置用户id\n     * @param uuid 用户id\n     */\n    setUserId(uuid) {\n        this.data.uuid = uuid;\n    }\n    /**\n     * 用来设置透传字段\n     * @param extra 透传字段\n     */\n    setExtra(extra) {\n        this.data.extra = extra;\n    }\n}\n","references":["D:/web/项目/TRACKER/src/types/index.ts","D:/web/项目/TRACKER/src/utils/pv.ts"]}
